import dotenv from "dotenv";
import { exec as run } from "node:child_process";
import { parseArgs } from "./parsing.js";
export const execShell = (args, callbackFunction) => {
    const shellCmd = parseArgs(args);
    console.log("[process] spawned", args);
    return run(shellCmd, (err, stdout, stderr) => {
        if (err) {
            console.error("\n" + stderr);
        }
        else {
            callbackFunction("\n" + stdout + "\n");
        }
    }).stdout;
};
export const Run = (argv, programFile) => new Promise((resolve, reject) => {
    var command = parseArgs([(programFile ? programFile : ""), ...argv]);
    console.log(`[process]`, `spawning child process ...`);
    return resolve(run(command, (error, stdout, stderr) => {
        if (error.code !== 0) {
            console.error(`[process]`, `recieved an error =>`, error.code, error.stack, stderr);
            reject(error);
        }
    }).stdout);
});
export const getHostConfig = () => {
    console.log(`[process]`, `making a fingerprint of host properties for later callback.`);
    dotenv.config();
    return ({
        USER: {
            Home: process.env['HOME'],
            Name: process.env['USER'],
            Id: process.env['UID'],
        },
        SYSTEM: {
            Name: process.env['HOSTNAME'],
            Environment: process.env,
            Architecture: process.arch === "x64" ? "x86_64" : process.arch,
            Platform: process.platform,
            OperatingSystem: process.platform,
            OperatingSystemType: process.env['OSTYPE'],
        },
        HOST: {
            ARCH: process.arch === "x64" ? "x86_64" : process.arch,
            NAME: process.env['HOSTNAME'],
            TYPE: process.env['HOSTTYPE'],
            PATHS: process.env['PATH'],
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQThCLE1BQU0sUUFBUSxDQUFDO0FBQ3BELE9BQU8sRUFBaUIsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR2hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFNekMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBbUIsRUFBRSxnQkFBdUMsRUFBbUIsRUFBRTtJQUN2RyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQ2YsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3BCLElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNILGdCQUFnQixDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDLENBQ0osQ0FBQyxNQUFNLENBQUE7QUFDWixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFjLEVBQUUsV0FBb0IsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDbkcsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDdkQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQW9CLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ2pGLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BGLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQjtJQUNMLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2YsQ0FBQyxDQUFDLENBQUE7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLDZEQUE2RCxDQUFDLENBQUM7SUFDeEYsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLE9BQU8sQ0FBQztRQUNKLElBQUksRUFBRTtZQUNGLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDekIsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxFQUFFO1lBQ0osSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzdCLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUN4QixZQUFZLEVBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDOUQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1lBQzFCLGVBQWUsRUFBRSxPQUFPLENBQUMsUUFBUTtZQUNqQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztTQUM3QztRQUNELElBQUksRUFBRTtZQUNGLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUN0RCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7WUFDN0IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQzdCLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztTQUM3QjtLQUNKLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkb3RlbnYsIHsgRG90ZW52Q29uZmlnT3V0cHV0IH0gZnJvbSBcImRvdGVudlwiO1xyXG5pbXBvcnQgeyBFeGVjRXhjZXB0aW9uLCBleGVjIGFzIHJ1biB9IGZyb20gXCJub2RlOmNoaWxkX3Byb2Nlc3NcIjtcclxuaW1wb3J0IHsgUGVyZm9ybWFuY2VPYnNlcnZlciB9IGZyb20gXCJub2RlOnBlcmZfaG9va3NcIjtcclxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcclxuaW1wb3J0IHsgcGFyc2VBcmdzIH0gZnJvbSBcIi4vcGFyc2luZy5qc1wiO1xyXG5cclxuLy8gZXhlY3V0ZSBvbiB3aW4zMiBkZWZhdWx0IGNtZCwgYXMgY2hpbGRfcHJvY2VzcyB5b3Ugc3Bhd24gaW4gdGhlIGRlZmF1bHQgY21kXHJcbi8vIGZvbGRlciBzdHJ1Y3R1cmUgaXMgcG9zaXggYnV0IGZvciB3aW4zMiBzbyBpdCBjYW4gZnVjayBzaGl0IHVwLlxyXG4vLyBydW5uaW5nIGV4ZWMgZnJvbSBwcm9jZXNzIG1lYW5zIHlvdSBBTFNPIHJ1biBvbiB0aGUgc2FtZSBwcm9jZXNzLCBBTFNPIHJ1biBvbiB5b3VyIGN1cnJlbnQgc2hlbGwsIHdoaWNoIGNhbiBiZSBnaXRiYXNoXHJcbi8vQGRlcHJpY2F0ZWRcclxuZXhwb3J0IGNvbnN0IGV4ZWNTaGVsbCA9IChhcmdzOiBBcnJheTxzdHJpbmc+LCBjYWxsYmFja0Z1bmN0aW9uPzogKG91dHB1dDogYW55KSA9PiBhbnkpOiBSZWFkYWJsZSB8IG51bGwgPT4ge1xyXG4gICAgY29uc3Qgc2hlbGxDbWQgPSBwYXJzZUFyZ3MoYXJncyk7XHJcbiAgICBjb25zb2xlLmxvZyhcIltwcm9jZXNzXSBzcGF3bmVkXCIsIGFyZ3MpO1xyXG4gICAgcmV0dXJuIHJ1bihzaGVsbENtZCxcclxuICAgICAgICAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiXFxuXCIgKyBzdGRlcnIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jdGlvbihcIlxcblwiICsgc3Rkb3V0ICsgXCJcXG5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApLnN0ZG91dFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUnVuID0gKGFyZ3Y6IHN0cmluZ1tdLCBwcm9ncmFtRmlsZT86IHN0cmluZykgPT4gbmV3IFByb21pc2U8UmVhZGFibGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHZhciBjb21tYW5kID0gcGFyc2VBcmdzKFsocHJvZ3JhbUZpbGUgPyBwcm9ncmFtRmlsZSA6IFwiXCIpLCAuLi5hcmd2XSk7XHJcbiAgICBjb25zb2xlLmxvZyhgW3Byb2Nlc3NdYCwgYHNwYXduaW5nIGNoaWxkIHByb2Nlc3MgLi4uYCk7XHJcbiAgICByZXR1cm4gcmVzb2x2ZShydW4oY29tbWFuZCwgKGVycm9yOiBFeGVjRXhjZXB0aW9uLCBzdGRvdXQ6IHN0cmluZywgc3RkZXJyOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbcHJvY2Vzc11gLCBgcmVjaWV2ZWQgYW4gZXJyb3IgPT5gLCBlcnJvci5jb2RlLCBlcnJvci5zdGFjaywgc3RkZXJyKTtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KS5zdGRvdXQpO1xyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEhvc3RDb25maWcgPSAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgW3Byb2Nlc3NdYCwgYG1ha2luZyBhIGZpbmdlcnByaW50IG9mIGhvc3QgcHJvcGVydGllcyBmb3IgbGF0ZXIgY2FsbGJhY2suYCk7XHJcbiAgICBkb3RlbnYuY29uZmlnKCk7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBVU0VSOiB7XHJcbiAgICAgICAgICAgIEhvbWU6IHByb2Nlc3MuZW52WydIT01FJ10sXHJcbiAgICAgICAgICAgIE5hbWU6IHByb2Nlc3MuZW52WydVU0VSJ10sXHJcbiAgICAgICAgICAgIElkOiBwcm9jZXNzLmVudlsnVUlEJ10sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBTWVNURU06IHtcclxuICAgICAgICAgICAgTmFtZTogcHJvY2Vzcy5lbnZbJ0hPU1ROQU1FJ10sXHJcbiAgICAgICAgICAgIEVudmlyb25tZW50OiBwcm9jZXNzLmVudixcclxuICAgICAgICAgICAgQXJjaGl0ZWN0dXJlOiBwcm9jZXNzLmFyY2ggPT09IFwieDY0XCIgPyBcIng4Nl82NFwiIDogcHJvY2Vzcy5hcmNoLFxyXG4gICAgICAgICAgICBQbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcclxuICAgICAgICAgICAgT3BlcmF0aW5nU3lzdGVtOiBwcm9jZXNzLnBsYXRmb3JtLFxyXG4gICAgICAgICAgICBPcGVyYXRpbmdTeXN0ZW1UeXBlOiBwcm9jZXNzLmVudlsnT1NUWVBFJ10sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBIT1NUOiB7XHJcbiAgICAgICAgICAgIEFSQ0g6IHByb2Nlc3MuYXJjaCA9PT0gXCJ4NjRcIiA/IFwieDg2XzY0XCIgOiBwcm9jZXNzLmFyY2gsXHJcbiAgICAgICAgICAgIE5BTUU6IHByb2Nlc3MuZW52WydIT1NUTkFNRSddLFxyXG4gICAgICAgICAgICBUWVBFOiBwcm9jZXNzLmVudlsnSE9TVFRZUEUnXSxcclxuICAgICAgICAgICAgUEFUSFM6IHByb2Nlc3MuZW52WydQQVRIJ10sXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSJdfQ==