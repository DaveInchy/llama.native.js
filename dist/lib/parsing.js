const parsePath = (filePath, isGitBash) => {
    var old = (`${filePath}`);
    if (old.includes("\/d\/"))
        old = old.replace("\/d\/", `D:\\`);
    if (old.includes("\/c\/"))
        old = old.replace("\/c\/", `C:\\`);
    if (old.includes("\/b\/"))
        old = old.replace("\/b\/", `B:\\`);
    if (old.includes("\/a\/"))
        old = old.replace("\/a\/", `A:\\`);
    if (old.includes("\\\\"))
        old = old.replaceAll("\\\\", `\\`);
    if (old.includes("\\"))
        old = old.replaceAll("\\", `\/`);
    if (old.includes("@"))
        old = old.replace("@", `\@`);
    if (isGitBash) {
        if (old.includes("A:/"))
            old = old.replace("A:/", `\/a\/`);
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
        if (old.includes("C:/"))
            old = old.replace("C:/", `\/c\/`);
        if (old.includes("D:/"))
            old = old.replace("D:/", `\/d\/`);
    }
    ;
    if (old.includes("\ \ "))
        old = old.replaceAll("\ \ ", "\ ");
    if (old.includes("\ "))
        old = old.replaceAll("\ ", ``);
    var oldAsNew = old;
    return oldAsNew;
};
const parseArgs = (args) => {
    let string = "";
    args.map(arg => {
        let substr = arg;
        return string = string + " " + substr;
    });
    return string;
};
export { parseArgs, parseArgs as parseCommand, parsePath };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJsaWIvcGFyc2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFNBQVMsR0FBRyxDQUFDLFFBQWdCLEVBQUUsU0FBbUIsRUFBRSxFQUFFO0lBQ3hELElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRzFCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFHOUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFcEQsSUFBSSxTQUFTLEVBQUU7UUFDWCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzFELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMxRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0tBQzdEO0lBQUEsQ0FBQztJQUdGLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV2RCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUE7SUFDbEIsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFtQixFQUFFLEVBQUU7SUFDdEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDWCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDakIsT0FBTyxNQUFNLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUE7QUFFRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsSUFBSSxZQUFZLEVBQUUsU0FBUyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCI7XHJcblxyXG5jb25zdCBwYXJzZVBhdGggPSAoZmlsZVBhdGg6IHN0cmluZywgaXNHaXRCYXNoPzogYm9vbGVhbikgPT4ge1xyXG4gICAgdmFyIG9sZCA9IChgJHtmaWxlUGF0aH1gKTtcclxuXHJcbiAgICAvLyBHaXQgQmFzaCA9PiBDTUQgOjogV2luMzIgRHJpdmVzXHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwvZFxcL1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJcXC9kXFwvXCIsIGBEOlxcXFxgKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXC9jXFwvXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIlxcL2NcXC9cIiwgYEM6XFxcXGApO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcL2JcXC9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiXFwvYlxcL1wiLCBgQjpcXFxcYCk7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwvYVxcL1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJcXC9hXFwvXCIsIGBBOlxcXFxgKTtcclxuXHJcbiAgICAvLyBXaW4zMiA9PlxyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcXFxcXFxcXCIpKSBvbGQgPSBvbGQucmVwbGFjZUFsbChcIlxcXFxcXFxcXCIsIGBcXFxcYCk7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFxcXFwiKSkgb2xkID0gb2xkLnJlcGxhY2VBbGwoXCJcXFxcXCIsIGBcXC9gKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJAXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIkBcIiwgYFxcQGApO1xyXG5cclxuICAgIGlmIChpc0dpdEJhc2gpIHtcclxuICAgICAgICBpZiAob2xkLmluY2x1ZGVzKFwiQTovXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIkE6L1wiLCBgXFwvYVxcL2ApXHJcbiAgICAgICAgaWYgKG9sZC5pbmNsdWRlcyhcIkI6L1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJCOi9cIiwgYFxcL2JcXC9gKVxyXG4gICAgICAgIGlmIChvbGQuaW5jbHVkZXMoXCJDOi9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQzovXCIsIGBcXC9jXFwvYClcclxuICAgICAgICBpZiAob2xkLmluY2x1ZGVzKFwiRDovXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIkQ6L1wiLCBgXFwvZFxcL2ApXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNwYWNlcyBhbmQgbGluZSBicmVha3NcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXCBcXCBcIikpIG9sZCA9IG9sZC5yZXBsYWNlQWxsKFwiXFwgXFwgXCIsIFwiXFwgXCIpO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcIFwiKSkgb2xkID0gb2xkLnJlcGxhY2VBbGwoXCJcXCBcIiwgYGApO1xyXG5cclxuICAgIHZhciBvbGRBc05ldyA9IG9sZFxyXG4gICAgcmV0dXJuIG9sZEFzTmV3O1xyXG59XHJcblxyXG5jb25zdCBwYXJzZUFyZ3MgPSAoYXJnczogQXJyYXk8c3RyaW5nPikgPT4ge1xyXG4gICAgbGV0IHN0cmluZyA9IFwiXCI7XHJcbiAgICBhcmdzLm1hcChhcmcgPT4ge1xyXG4gICAgICAgIGxldCBzdWJzdHIgPSBhcmc7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZyA9IHN0cmluZyArIFwiIFwiICsgc3Vic3RyO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgeyBwYXJzZUFyZ3MsIHBhcnNlQXJncyBhcyBwYXJzZUNvbW1hbmQsIHBhcnNlUGF0aCB9Il19