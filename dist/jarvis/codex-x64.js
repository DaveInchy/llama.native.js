import { resolvePath, saveResultAsFileMemory } from "../lib/files.js";
import { parsePath } from "../lib/parsing.js";
import { execShell, getHostConfig } from "../lib/process.js";
const host = getHostConfig();
const promptCodex = (inference_prompt) => new Promise((resolve, reject) => {
    const executablePath = host.SYSTEM.Platform === "win32" ? "bin/x86_64/win32/llama.exe" : "bin/x86_64/linux/llama.openblas";
    const executable = resolvePath(executablePath);
    const modelPath = resolvePath("bin/models/ggml-v3-custom-13B-q5bit.bin");
    const args = [
        parsePath(executable, false),
        `--seed`, `-1`,
        `--threads 2`,
        `--n-predict 2048`,
        `--top_k 40`,
        `--top_p 0.85`,
        `--temp 0.6`,
        `--repeat-last-n -1`,
        `--keep -1`,
        `--repeat-penalty 1.3`,
        `--mlock`,
        `--ctx-size 2048`,
        `--model \"${parsePath(modelPath, false)}\"`,
        `-e`,
        `-p \"\\n\\rCONTEXT: ${`You are a very good personal coding assistant called Jarvis, You write code most of all and code-summaries if needed.\\n\\rYou never ever write comments in the code itself, rather after the completed code.\\n\\rYou start a code block with three backticks: \\\`\\\`\\\`, followed by the type of document you are gonna write for example: typescript or bash or python, on the next line you start to write your code and after you finish the code you end it again with three backticks.\\n\\rYou try to fullfill all tasks that have been instructed`}\\n\\n\\rHUMAN:\\n\\r${`${inference_prompt}`}.\\n\\n\\rJARVIS:\\n\\r\"`,
    ];
    const execution = execShell(args, (finalOutput) => saveResultAsFileMemory(finalOutput));
    resolve(execution);
    return execution;
});
export default promptCodex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZXgteDY0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImphcnZpcy9jb2RleC14NjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBTTdELE1BQU0sSUFBSSxHQUFHLGFBQWEsRUFBRSxDQUFDO0FBRTdCLE1BQU0sV0FBVyxHQUFHLENBQUMsZ0JBQXdCLEVBQTRCLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUN4RyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxpQ0FBaUMsQ0FBQztJQUMzSCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDL0MsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFDekUsTUFBTSxJQUFJLEdBQUc7UUFDVCxTQUFTLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztRQUM1QixRQUFRLEVBQUUsSUFBSTtRQUNkLGFBQWE7UUFDYixrQkFBa0I7UUFDbEIsWUFBWTtRQUNaLGNBQWM7UUFDZCxZQUFZO1FBQ1osb0JBQW9CO1FBQ3BCLFdBQVc7UUFFWCxzQkFBc0I7UUFDdEIsU0FBUztRQUNULGlCQUFpQjtRQUdqQixhQUFhLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFTNUMsSUFBSTtRQUVKLHVCQUF1QiwraEJBQStoQix3QkFBd0IsR0FBRyxnQkFBZ0IsRUFBRSwyQkFBMkI7S0FFam9CLENBQUM7SUFFRixNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQixPQUFPLFNBQVMsQ0FBQTtBQUNwQixDQUFDLENBQUMsQ0FBQztBQUVILGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IHByb2Nlc3MgZnJvbSBcInByb2Nlc3NcIjtcclxuaW1wb3J0IHN0cmVhbSBmcm9tIFwic3RyZWFtXCI7XHJcbmltcG9ydCB7IHJlc29sdmVQYXRoLCBzYXZlUmVzdWx0QXNGaWxlTWVtb3J5IH0gZnJvbSBcIi4uL2xpYi9maWxlcy5qc1wiO1xyXG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tIFwiLi4vbGliL3BhcnNpbmcuanNcIjtcclxuaW1wb3J0IHsgZXhlY1NoZWxsLCBnZXRIb3N0Q29uZmlnIH0gZnJvbSBcIi4uL2xpYi9wcm9jZXNzLmpzXCI7XHJcblxyXG4vLyBpbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xyXG5cclxuLy8gZG90ZW52LmNvbmZpZygpO1xyXG5cclxuY29uc3QgaG9zdCA9IGdldEhvc3RDb25maWcoKTtcclxuXHJcbmNvbnN0IHByb21wdENvZGV4ID0gKGluZmVyZW5jZV9wcm9tcHQ6IHN0cmluZyk6IFByb21pc2U8c3RyZWFtLlJlYWRhYmxlPiA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBleGVjdXRhYmxlUGF0aCA9IGhvc3QuU1lTVEVNLlBsYXRmb3JtID09PSBcIndpbjMyXCIgPyBcImJpbi94ODZfNjQvd2luMzIvbGxhbWEuZXhlXCIgOiBcImJpbi94ODZfNjQvbGludXgvbGxhbWEub3BlbmJsYXNcIjtcclxuICAgIGNvbnN0IGV4ZWN1dGFibGUgPSByZXNvbHZlUGF0aChleGVjdXRhYmxlUGF0aCk7XHJcbiAgICBjb25zdCBtb2RlbFBhdGggPSByZXNvbHZlUGF0aChcImJpbi9tb2RlbHMvZ2dtbC12My1jdXN0b20tMTNCLXE1Yml0LmJpblwiKTtcclxuICAgIGNvbnN0IGFyZ3MgPSBbXHJcbiAgICAgICAgcGFyc2VQYXRoKGV4ZWN1dGFibGUsIGZhbHNlKSxcclxuICAgICAgICBgLS1zZWVkYCwgYC0xYCxcclxuICAgICAgICBgLS10aHJlYWRzIDJgLFxyXG4gICAgICAgIGAtLW4tcHJlZGljdCAyMDQ4YCxcclxuICAgICAgICBgLS10b3BfayA0MGAsXHJcbiAgICAgICAgYC0tdG9wX3AgMC44NWAsXHJcbiAgICAgICAgYC0tdGVtcCAwLjZgLFxyXG4gICAgICAgIGAtLXJlcGVhdC1sYXN0LW4gLTFgLCAvLyAwPyB0byByZXBlYXQgbm9uZSwgYnV0IHRoZW4gaG93IGRvZXMgaXQgY29tcGxldGUuXHJcbiAgICAgICAgYC0ta2VlcCAtMWAsIC8vIDEyOD8gdG9rZW4gYmFzZWQgc2hvcnQgbWVtb3J5IHNhbXBsZSBzaXplXHJcbiAgICAgICAgLy8gYC0tdHlwaWNhbCA0YCwgLy8gaG93IHByZWRpY3RhYmxlIHNob3VsZCBpdCBiZT8gLy8gNCBzZWVtcyBvcHRpbWFsPyBpIGhhdmUgbm8gY2x1ZSB3aGF0IHRoaXMgcGFyYW1ldGVyIGlzLlxyXG4gICAgICAgIGAtLXJlcGVhdC1wZW5hbHR5IDEuM2AsXHJcbiAgICAgICAgYC0tbWxvY2tgLFxyXG4gICAgICAgIGAtLWN0eC1zaXplIDIwNDhgLFxyXG4gICAgICAgIC8vIGAtLXByb21wdC1jYWNoZS1hbGxgLCBtYXliZSBmaWd1cmUgb3V0IGhvdyB0aGlzIHdvcmtzXHJcblxyXG4gICAgICAgIGAtLW1vZGVsIFxcXCIke3BhcnNlUGF0aChtb2RlbFBhdGgsIGZhbHNlKX1cXFwiYCxcclxuICAgICAgICAvL1wiLS1tbG9ja1wiLCAvL3NhdmUgbWVtb3J5IGJldHdlZW4gZXhlY3V0aW9uc1xyXG4gICAgICAgIC8vIFwiLS1uby1tbWFwXCIsIC8vIGlmYCwgYCAtLW1sb2NrIGJ1Z3MsIHVzZSBzbG93IGxvYWRcclxuXHJcbiAgICAgICAgLy8gXCItaVwiLCAvLyBpbnRlcmFjdGl2aXR5IG1vZGUgZm9yIGFscGFjYSBiYXNlZCBtb2RlbHNcclxuICAgICAgICAvLyBgLXIgXCJIVU1BTjogXCJgLCAvLyB0aGUgbW9kZWwgd2lsbCBlbmQgaGlzIGF3bnNlciB3aXRoIHRoaXMsIGFuZCB0aGlzIGluaXRpYXRlcyB5b3VyIGlucHV0IG9uIHRoZSB0ZXJtaW5hbFxyXG5cclxuICAgICAgICAvL2AtaW5zYCwgLy8gaW5zdHJ1Y3Rpb24gbW9kZSBmb3IgYWxwYWNhIGJhc2VkIG1vZGVsc1xyXG5cclxuICAgICAgICBgLWVgLFxyXG5cclxuICAgICAgICBgLXAgXFxcIlxcXFxuXFxcXHJDT05URVhUOiAke2BZb3UgYXJlIGEgdmVyeSBnb29kIHBlcnNvbmFsIGNvZGluZyBhc3Npc3RhbnQgY2FsbGVkIEphcnZpcywgWW91IHdyaXRlIGNvZGUgbW9zdCBvZiBhbGwgYW5kIGNvZGUtc3VtbWFyaWVzIGlmIG5lZWRlZC5cXFxcblxcXFxyWW91IG5ldmVyIGV2ZXIgd3JpdGUgY29tbWVudHMgaW4gdGhlIGNvZGUgaXRzZWxmLCByYXRoZXIgYWZ0ZXIgdGhlIGNvbXBsZXRlZCBjb2RlLlxcXFxuXFxcXHJZb3Ugc3RhcnQgYSBjb2RlIGJsb2NrIHdpdGggdGhyZWUgYmFja3RpY2tzOiBcXFxcXFxgXFxcXFxcYFxcXFxcXGAsIGZvbGxvd2VkIGJ5IHRoZSB0eXBlIG9mIGRvY3VtZW50IHlvdSBhcmUgZ29ubmEgd3JpdGUgZm9yIGV4YW1wbGU6IHR5cGVzY3JpcHQgb3IgYmFzaCBvciBweXRob24sIG9uIHRoZSBuZXh0IGxpbmUgeW91IHN0YXJ0IHRvIHdyaXRlIHlvdXIgY29kZSBhbmQgYWZ0ZXIgeW91IGZpbmlzaCB0aGUgY29kZSB5b3UgZW5kIGl0IGFnYWluIHdpdGggdGhyZWUgYmFja3RpY2tzLlxcXFxuXFxcXHJZb3UgdHJ5IHRvIGZ1bGxmaWxsIGFsbCB0YXNrcyB0aGF0IGhhdmUgYmVlbiBpbnN0cnVjdGVkYH1cXFxcblxcXFxuXFxcXHJIVU1BTjpcXFxcblxcXFxyJHtgJHtpbmZlcmVuY2VfcHJvbXB0fWB9LlxcXFxuXFxcXG5cXFxcckpBUlZJUzpcXFxcblxcXFxyXFxcImAsXHJcblxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBleGVjdXRpb24gPSBleGVjU2hlbGwoYXJncywgKGZpbmFsT3V0cHV0KSA9PiBzYXZlUmVzdWx0QXNGaWxlTWVtb3J5KGZpbmFsT3V0cHV0KSk7XHJcbiAgICByZXNvbHZlKGV4ZWN1dGlvbik7XHJcbiAgICByZXR1cm4gZXhlY3V0aW9uXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcHJvbXB0Q29kZXg7XHJcbiJdfQ==