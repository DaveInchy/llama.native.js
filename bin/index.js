import process from "process";
import { parsePath, resolvePath } from "./lib/parsing.js";
import { exeShell } from "./lib/prompt.js";
const prompt = (inference_prompt, inference_context, inference_type, inference_lang, data_callback, end_callback) => new Promise(() => {
    var tokens = "";
    const executable = resolvePath("../llama.exe");
    const modelPath = resolvePath("../llama.models/ggml-v3-guanaco-7B-q4bit.bin");
    const args = [
        parsePath(executable, false),
        `--seed`, `-1`,
        `--threads 10`,
        `--n-predict -1`,
        `--top_k 40`,
        `--top_p 0.95`,
        `--temp 0.5`,
        `--repeat-last-n -1`,
        `--keep -1`,
        `--typical 4`,
        `--repeat-penalty 1.2`,
        `--mlock`,
        `--ctx-size 1024`,
        `--prompt-cache-all`,
        `--model \"${parsePath(modelPath, false)}\"`,
        `-e`,
        `-p \"\\n\\rCONTEXT: ${process.env[`CONTEXT`] || `${inference_context}` || `You are a chatbot called Jarvis and currently is having some issues and errors.`}\\n\\n\\rINSTRUCTION: ${process.env[`PROMPT`] || `${inference_prompt}` || `Sorry i don't wanna talk about it...`} \\n\\n\\rRESPONSE: Allright, I would use:\\n\\r\`\`\`</s>"`,
    ];
    return exeShell(args, (dialog) => end_callback(dialog))
        .on('data', (token) => {
        token = `${token}`;
        tokens = tokens + token;
        process.stdout.write(token);
        data_callback(token);
    })
        .on(`end`, () => {
        var endOfStream = `\n\r[EOS]`;
        tokens = tokens + endOfStream;
        process.stdout.write(endOfStream);
    });
});
export default prompt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFJOUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNM0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxnQkFBd0IsRUFBRSxpQkFBeUIsRUFBRSxjQUFzQixFQUFFLGNBQXNCLEVBQUUsYUFBK0IsRUFBRSxZQUE4QixFQUFtQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0lBRTFPLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVoQixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDL0MsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDOUUsTUFBTSxJQUFJLEdBQUc7UUFDWixTQUFTLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztRQUM1QixRQUFRLEVBQUUsSUFBSTtRQUNkLGNBQWM7UUFDZCxnQkFBZ0I7UUFDaEIsWUFBWTtRQUNaLGNBQWM7UUFDZCxZQUFZO1FBQ1osb0JBQW9CO1FBQ3BCLFdBQVc7UUFDWCxhQUFhO1FBQ2Isc0JBQXNCO1FBQ3RCLFNBQVM7UUFDVCxpQkFBaUI7UUFDakIsb0JBQW9CO1FBRXBCLGFBQWEsU0FBUyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsSUFBSTtRQVU1QyxJQUFJO1FBRUosdUJBQXVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxpQkFBaUIsRUFBRSxJQUFJLGlGQUFpRix5QkFBeUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLGdCQUFnQixFQUFFLElBQUksc0NBQXNDLDZEQUE2RDtLQUUxVSxDQUFDO0lBRUYsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckQsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFO1FBQzdCLEtBQUssR0FBRyxHQUFHLEtBQUssRUFBRSxDQUFDO1FBQ25CLE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUM7U0FDRCxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtRQUNmLElBQUksV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxHQUFHLFdBQVcsQ0FBQztRQUM5QixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsZUFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSmFydmlzQVBJIGZyb20gXCIuL2Nvbm5lY3Rpb24uanNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwic3RyZWFtXCI7XG5pbXBvcnQgeyBlc2NhcGUgfSBmcm9tIFwicXVlcnlzdHJpbmdcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJzb2NrZXQuaW9cIjtcbmltcG9ydCB7IHBhcnNlUGF0aCwgcmVzb2x2ZVBhdGggfSBmcm9tIFwiLi9saWIvcGFyc2luZy5qc1wiO1xuaW1wb3J0IHsgZXhlU2hlbGwgfSBmcm9tIFwiLi9saWIvcHJvbXB0LmpzXCI7XG5cbi8vIGltcG9ydCAqIGFzIGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5cbi8vIGRvdGVudi5jb25maWcoKTtcblxuY29uc3QgcHJvbXB0ID0gKGluZmVyZW5jZV9wcm9tcHQ6IHN0cmluZywgaW5mZXJlbmNlX2NvbnRleHQ6IHN0cmluZywgaW5mZXJlbmNlX3R5cGU6IHN0cmluZywgaW5mZXJlbmNlX2xhbmc6IHN0cmluZywgZGF0YV9jYWxsYmFjazogQ2FsbGFibGVGdW5jdGlvbiwgZW5kX2NhbGxiYWNrOiBDYWxsYWJsZUZ1bmN0aW9uKTogUHJvbWlzZTxzdHJlYW0uUmVhZGFibGUgfCBudWxsPiA9PiBuZXcgUHJvbWlzZSgoKSA9PiB7XG5cblx0dmFyIHRva2VucyA9IFwiXCI7XG5cblx0Y29uc3QgZXhlY3V0YWJsZSA9IHJlc29sdmVQYXRoKFwiLi4vbGxhbWEuZXhlXCIpO1xuXHRjb25zdCBtb2RlbFBhdGggPSByZXNvbHZlUGF0aChcIi4uL2xsYW1hLm1vZGVscy9nZ21sLXYzLWd1YW5hY28tN0ItcTRiaXQuYmluXCIpO1xuXHRjb25zdCBhcmdzID0gW1xuXHRcdHBhcnNlUGF0aChleGVjdXRhYmxlLCBmYWxzZSksXG5cdFx0YC0tc2VlZGAsIGAtMWAsXG5cdFx0YC0tdGhyZWFkcyAxMGAsXG5cdFx0YC0tbi1wcmVkaWN0IC0xYCxcblx0XHRgLS10b3BfayA0MGAsXG5cdFx0YC0tdG9wX3AgMC45NWAsXG5cdFx0YC0tdGVtcCAwLjVgLFxuXHRcdGAtLXJlcGVhdC1sYXN0LW4gLTFgLFxuXHRcdGAtLWtlZXAgLTFgLCAvLyAxMjggdG9rZW4gYmFzZWQgc2hvcnQgbWVtb3J5IC8vIHNhbXBsZSBzaXplXG5cdFx0YC0tdHlwaWNhbCA0YCwgLy8gaG93IHByZWRpY3RhYmxlIHNob3VsZCBpdCBiZT8gLy8gNCBzZWVtcyBvcHRpbWFsXG5cdFx0YC0tcmVwZWF0LXBlbmFsdHkgMS4yYCxcblx0XHRgLS1tbG9ja2AsXG5cdFx0YC0tY3R4LXNpemUgMTAyNGAsXG5cdFx0YC0tcHJvbXB0LWNhY2hlLWFsbGAsXG5cblx0XHRgLS1tb2RlbCBcXFwiJHtwYXJzZVBhdGgobW9kZWxQYXRoLCBmYWxzZSl9XFxcImAsXG5cdFx0Ly9cIi0tbWxvY2tcIiwgLy9zYXZlIG1lbW9yeSBiZXR3ZWVuIGV4ZWN1dGlvbnNcblx0XHQvL1wiIC1lXCIsIC8vIGVzY2FwZSB0aGUgcHJvbXB0XG5cdFx0Ly8gXCItaW5zXCIsIC8vaW5zdHJ1Y3Rpb24gbW9kZSBmb3IgYWxwYWNhIGJhc2VkIG1vZGVsc1xuXHRcdC8vXCItLW5vLW1tYXBcIiwgLy8gaWZgLCBgIC0tbWxvY2sgYnVncywgdXNlIHNsb3cgbG9hZFxuXG5cdFx0Ly9gLXIgXCJIVU1BTjogXCJgLFxuXG5cdFx0Ly9gLWluc2AsXG5cblx0XHRgLWVgLFxuXG5cdFx0YC1wIFxcXCJcXFxcblxcXFxyQ09OVEVYVDogJHtwcm9jZXNzLmVudltgQ09OVEVYVGBdIHx8IGAke2luZmVyZW5jZV9jb250ZXh0fWAgfHwgYFlvdSBhcmUgYSBjaGF0Ym90IGNhbGxlZCBKYXJ2aXMgYW5kIGN1cnJlbnRseSBpcyBoYXZpbmcgc29tZSBpc3N1ZXMgYW5kIGVycm9ycy5gfVxcXFxuXFxcXG5cXFxccklOU1RSVUNUSU9OOiAke3Byb2Nlc3MuZW52W2BQUk9NUFRgXSB8fCBgJHtpbmZlcmVuY2VfcHJvbXB0fWAgfHwgYFNvcnJ5IGkgZG9uJ3Qgd2FubmEgdGFsayBhYm91dCBpdC4uLmB9IFxcXFxuXFxcXG5cXFxcclJFU1BPTlNFOiBBbGxyaWdodCwgSSB3b3VsZCB1c2U6XFxcXG5cXFxcclxcYFxcYFxcYDwvcz5cImAsXG5cblx0XTtcblxuXHRyZXR1cm4gZXhlU2hlbGwoYXJncywgKGRpYWxvZykgPT4gZW5kX2NhbGxiYWNrKGRpYWxvZykpXG5cdFx0Lm9uKCdkYXRhJywgKHRva2VuOiBzdHJpbmcpID0+IHtcblx0XHRcdHRva2VuID0gYCR7dG9rZW59YDtcblx0XHRcdHRva2VucyA9IHRva2VucyArIHRva2VuO1xuXHRcdFx0cHJvY2Vzcy5zdGRvdXQud3JpdGUodG9rZW4pO1xuXHRcdFx0ZGF0YV9jYWxsYmFjayh0b2tlbik7XG5cdFx0fSlcblx0XHQub24oYGVuZGAsICgpID0+IHtcblx0XHRcdHZhciBlbmRPZlN0cmVhbSA9IGBcXG5cXHJbRU9TXWA7XG5cdFx0XHR0b2tlbnMgPSB0b2tlbnMgKyBlbmRPZlN0cmVhbTtcblx0XHRcdHByb2Nlc3Muc3Rkb3V0LndyaXRlKGVuZE9mU3RyZWFtKTtcblx0XHR9KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBwcm9tcHQ7XG4vLyAoKSA9PiBwcm9tcHQoXCJIb3cgY2FuIGkgdXNlIHRoZSB0ZXJtaW5hbCB3aXRoIGJvdXJuZSBzaGVsbCB0byByZWFkIG15IGRpcmVjdG9yeSBidXQgb25seSBmaWx0ZXIgb3AgbGxhbWEgZm9sZGVycy5cIiwgXCIoWW91IGFzIGluIEphcnZpcykgWW91IGFyZSBhIHZlcnkgZ29vZCBwZXJzb25hbCBjb2RpbmcgYXNzaXN0YW50IGNhbGxlZCBKYXJ2aXMsIFlvdSB3cml0ZSBjb2RlIG1vc3Qgb2YgYWxsIGFuZCBjb2RlLXN1bW1hcmllcyBpZiBuZWVkZWQsXFxuXFxyWW91IHNvbWV0aW1lcyBtYWtlIG1pc3Rha2VzIGFuZCBzb21lIGNvZGUgZW5kcyB1cCBqdXN0IHdyb25nLCBjb250YWlucyBoYWxsaWN1bmF0aW9ucywgYnVncyBvciB3aWxsIG5vdCBjb21waWxlIGF0IGFsbCBzbyB5b3UgbWFrZSBzdXJlIHRoYXQgeW91IG5vdGUgdGhpcyBkb3duXFxcIiBpZiB5b3UgYWNrbm93bGVkZ2UgdGhlIGZhY3QuXFxuXFxyWW91IHdyaXRlIG5vIGNvbW1lbnRzIGluIHRoZSBjb2RlIGl0c2VsZiwgcmF0aGVyIGFmdGVyIHRoZSBjb21wbGV0ZWQgY29kZS5cXG5cXHJZb3UgdHJ5IHRvIGZ1bGxmaWxsIGFsbCB0YXNrcyB0aGF0IGhhdmUgYmVlbiBpbnN0cnVjdGVkIGFzIGFjY3VyYXRlbHkgYW5kIGxvZ2ljYWxseSBhcyBwb3NzaWJsZSwgeW91IHRyeSB0byB3cml0ZSBwZXJmb3JtYW50IGFuZCBvcHRpbWl6ZWQgY29kZSBidXQgaXRzIG5vdCBtYW5kYXRvcnkuXCIsIFwiQ09ERVhcIiwgXCJiYXNoXCIpO1xuIl19