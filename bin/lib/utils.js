import { __awaiter } from "tslib";
import fs from "fs";
import { exec } from "child_process";
import { parseCommand, resolvePath } from "./parsing.js";
export const wait = (waitForSec = 0.1) => new Promise((resolve, rejects) => {
    try {
        setTimeout(() => {
            resolve();
        }, waitForSec * 1000);
    }
    catch (err) {
        rejects(err);
    }
    return;
});
export const exeShell = (args, callbackFunction) => {
    const shellCmd = parseCommand(args);
    return exec(shellCmd, (err, stdout, stderr) => {
        if (err) {
            console.error("\n" + stderr);
        }
        else {
            callbackFunction("\n" + stdout + "\n");
        }
    }).stdout;
};
export const saveResultAsHardMemory = (resultString) => __awaiter(void 0, void 0, void 0, function* () {
    let dateTime = new String(Date.now());
    const filePathMarkdown = resolvePath(`../llama.storage/markdown/${dateTime}.md`);
    const filePathRaw = resolvePath(`../llama.storage/utf8/${dateTime}.txt`);
    fs.writeFileSync(filePathMarkdown, `${resultString}`, { flag: 'a+', "encoding": "utf8" });
    fs.writeFileSync(filePathRaw, `${resultString}`, { flag: "a+", "encoding": "utf8" });
    console.log(`\n\r[MEMORY] > Stored Dialog in Markdown format and Raw UTF8 Text format.`);
    return;
});
export const cleanUp = (callback) => __awaiter(void 0, void 0, void 0, function* () {
    return callback();
});
export default exeShell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUlwQixPQUFPLEVBQUUsSUFBSSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRy9DLE9BQU8sRUFBRSxZQUFZLEVBQWEsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBFLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO0lBQzdFLElBQUk7UUFDQSxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUUsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDaEI7SUFDRCxPQUFNO0FBQ1YsQ0FBQyxDQUFDLENBQUM7QUFLSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFtQixFQUFFLGdCQUF1QyxFQUFtQixFQUFFO0lBQ3RHLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQ2hCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNwQixJQUFJLEdBQUcsRUFBRTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDSCxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzFDO0lBQ0wsQ0FBQyxDQUNKLENBQUMsTUFBTSxDQUFDO0FBQ2IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBTyxZQUFZLEVBQUUsRUFBRTtJQUN6RCxJQUFJLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUV0QyxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyw2QkFBNkIsUUFBUSxLQUFLLENBQUMsQ0FBQztJQUNqRixNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMseUJBQXlCLFFBQVEsTUFBTSxDQUFDLENBQUM7SUFFekUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLFlBQVksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRixFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxHQUFHLFlBQVksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUVyRixPQUFPLENBQUMsR0FBRyxDQUFDLDJFQUEyRSxDQUFDLENBQUM7SUFDekYsT0FBTztBQUNYLENBQUMsQ0FBQSxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQU8sUUFBUSxFQUFFLEVBQUU7SUFFdEMsT0FBTyxRQUFRLEVBQUUsQ0FBQztBQUN0QixDQUFDLENBQUEsQ0FBQztBQUVGLGVBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgcCwgeyBwYXJzZSB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCBwcm9jZXNzIGZyb20gXCJwcm9jZXNzXCI7XHJcbmltcG9ydCB7IGV4ZWMsIGV4ZWNTeW5jIH0gZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcclxuaW1wb3J0IHsgY3JlYXRlUmVxdWlyZSB9IGZyb20gXCJtb2R1bGVcIjtcclxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XHJcbmltcG9ydCB7IHBhcnNlQ29tbWFuZCwgcGFyc2VQYXRoLCByZXNvbHZlUGF0aCB9IGZyb20gXCIuL3BhcnNpbmcuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCB3YWl0ID0gKHdhaXRGb3JTZWMgPSAwLjEpID0+IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3RzKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSwgd2FpdEZvclNlYyAqIDEwMDApO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVqZWN0cyhlcnIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuXHJcbn0pO1xyXG5cclxuLy8gZXhlY3V0ZSBvbiB3aW4zMiBkZWZhdWx0IGNtZCwgYXMgY2hpbGRfcHJvY2VzcyB5b3Ugc3Bhd24gaW4gdGhlIGRlZmF1bHQgY21kXHJcbi8vIHJ1bm5pbmcgZXhlYyBmcm9tIHByb2Nlc3MgbWVhbnMgeW91IEFMU08gcnVuIG9uIHRoZSBzYW1lIHByb2Nlc3MsIEFMU08gcnVuIG9uIHlvdXIgY3VycmVudCBzaGVsbCwgd2hpY2ggY2FuIGJlIGdpdGJhc2hcclxuLy8gZm9sZGVyIHN0cnVjdHVyZSBpcyBwb3NpeCBidXQgZm9yIHdpbjMyIHNvIGl0IGNhbiBmdWNrIHNoaXQgdXAuXHJcbmV4cG9ydCBjb25zdCBleGVTaGVsbCA9IChhcmdzOiBBcnJheTxzdHJpbmc+LCBjYWxsYmFja0Z1bmN0aW9uPzogKG91dHB1dDogYW55KSA9PiBhbnkpOiBSZWFkYWJsZSB8IG51bGwgPT4ge1xyXG4gICAgY29uc3Qgc2hlbGxDbWQgPSBwYXJzZUNvbW1hbmQoYXJncyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInByb2Nlc3Mgc3Bhd25lZFwiLCBhcmdzLCBzaGVsbENtZCwpO1xyXG4gICAgcmV0dXJuIGV4ZWMoc2hlbGxDbWQsXHJcbiAgICAgICAgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlxcblwiICsgc3RkZXJyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuY3Rpb24oXCJcXG5cIiArIHN0ZG91dCArIFwiXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgKS5zdGRvdXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzYXZlUmVzdWx0QXNIYXJkTWVtb3J5ID0gYXN5bmMgKHJlc3VsdFN0cmluZykgPT4ge1xyXG4gICAgbGV0IGRhdGVUaW1lID0gbmV3IFN0cmluZyhEYXRlLm5vdygpKTtcclxuXHJcbiAgICBjb25zdCBmaWxlUGF0aE1hcmtkb3duID0gcmVzb2x2ZVBhdGgoYC4uL2xsYW1hLnN0b3JhZ2UvbWFya2Rvd24vJHtkYXRlVGltZX0ubWRgKTtcclxuICAgIGNvbnN0IGZpbGVQYXRoUmF3ID0gcmVzb2x2ZVBhdGgoYC4uL2xsYW1hLnN0b3JhZ2UvdXRmOC8ke2RhdGVUaW1lfS50eHRgKTtcclxuXHJcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoTWFya2Rvd24sIGAke3Jlc3VsdFN0cmluZ31gLCB7IGZsYWc6ICdhKycsIFwiZW5jb2RpbmdcIjogXCJ1dGY4XCIgfSk7XHJcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoUmF3LCBgJHtyZXN1bHRTdHJpbmd9YCwgeyBmbGFnOiBcImErXCIsIFwiZW5jb2RpbmdcIjogXCJ1dGY4XCIgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYFxcblxccltNRU1PUlldID4gU3RvcmVkIERpYWxvZyBpbiBNYXJrZG93biBmb3JtYXQgYW5kIFJhdyBVVEY4IFRleHQgZm9ybWF0LmApO1xyXG4gICAgcmV0dXJuO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFuVXAgPSBhc3luYyAoY2FsbGJhY2spID0+IHtcclxuXHJcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGV4ZVNoZWxsOyJdfQ==