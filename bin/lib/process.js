import { exec as run } from "node:child_process";
import { parseArgs } from "./parsing.js";
export const execShell = (args, callbackFunction) => {
    const shellCmd = parseArgs(args);
    console.log("process spawned", shellCmd);
    return run(shellCmd, (err, stdout, stderr) => {
        if (err) {
            console.error("\n" + stderr);
        }
        else {
            callbackFunction("\n" + stdout + "\n");
        }
    }).stdout;
};
export const Run = (argv, programFile) => new Promise((resolve, reject) => {
    var command = parseArgs([(programFile ? programFile : ""), ...argv]);
    console.log(`[process]`, `spawning child process ...`);
    return resolve(run(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`[process]`, `recieved an error =>`, error, stderr);
            reject(error);
        }
    }).stdout);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQStCLElBQUksSUFBSSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBTXpDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQW1CLEVBQUUsZ0JBQXVDLEVBQW1CLEVBQUU7SUFDdkcsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFFLENBQUM7SUFDMUMsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUNmLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNwQixJQUFJLEdBQUcsRUFBRTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDSCxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzFDO0lBQ0wsQ0FBQyxDQUNKLENBQUMsTUFBTSxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBYyxFQUFFLFdBQW9CLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFXLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQ25HLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFvQixFQUFFLE1BQWMsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUNqRixJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLHNCQUFzQixFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakI7SUFDTCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNmLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hpbGRQcm9jZXNzLCBFeGVjRXhjZXB0aW9uLCBleGVjIGFzIHJ1biB9IGZyb20gXCJub2RlOmNoaWxkX3Byb2Nlc3NcIjtcclxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcclxuaW1wb3J0IHsgcGFyc2VBcmdzIH0gZnJvbSBcIi4vcGFyc2luZy5qc1wiO1xyXG5cclxuLy8gZXhlY3V0ZSBvbiB3aW4zMiBkZWZhdWx0IGNtZCwgYXMgY2hpbGRfcHJvY2VzcyB5b3Ugc3Bhd24gaW4gdGhlIGRlZmF1bHQgY21kXHJcbi8vIGZvbGRlciBzdHJ1Y3R1cmUgaXMgcG9zaXggYnV0IGZvciB3aW4zMiBzbyBpdCBjYW4gZnVjayBzaGl0IHVwLlxyXG4vLyBydW5uaW5nIGV4ZWMgZnJvbSBwcm9jZXNzIG1lYW5zIHlvdSBBTFNPIHJ1biBvbiB0aGUgc2FtZSBwcm9jZXNzLCBBTFNPIHJ1biBvbiB5b3VyIGN1cnJlbnQgc2hlbGwsIHdoaWNoIGNhbiBiZSBnaXRiYXNoXHJcbi8vQGRlcHJpY2F0ZWRcclxuZXhwb3J0IGNvbnN0IGV4ZWNTaGVsbCA9IChhcmdzOiBBcnJheTxzdHJpbmc+LCBjYWxsYmFja0Z1bmN0aW9uPzogKG91dHB1dDogYW55KSA9PiBhbnkpOiBSZWFkYWJsZSB8IG51bGwgPT4ge1xyXG4gICAgY29uc3Qgc2hlbGxDbWQgPSBwYXJzZUFyZ3MoYXJncyk7XHJcbiAgICBjb25zb2xlLmxvZyhcInByb2Nlc3Mgc3Bhd25lZFwiLCBzaGVsbENtZCwpO1xyXG4gICAgcmV0dXJuIHJ1bihzaGVsbENtZCxcclxuICAgICAgICAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiXFxuXCIgKyBzdGRlcnIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jdGlvbihcIlxcblwiICsgc3Rkb3V0ICsgXCJcXG5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApLnN0ZG91dFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUnVuID0gKGFyZ3Y6IHN0cmluZ1tdLCBwcm9ncmFtRmlsZT86IHN0cmluZykgPT4gbmV3IFByb21pc2U8UmVhZGFibGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHZhciBjb21tYW5kID0gcGFyc2VBcmdzKFsocHJvZ3JhbUZpbGUgPyBwcm9ncmFtRmlsZSA6IFwiXCIpLCAuLi5hcmd2XSk7XHJcbiAgICBjb25zb2xlLmxvZyhgW3Byb2Nlc3NdYCwgYHNwYXduaW5nIGNoaWxkIHByb2Nlc3MgLi4uYCk7XHJcbiAgICByZXR1cm4gcmVzb2x2ZShydW4oY29tbWFuZCwgKGVycm9yOiBFeGVjRXhjZXB0aW9uLCBzdGRvdXQ6IHN0cmluZywgc3RkZXJyOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW3Byb2Nlc3NdYCwgYHJlY2lldmVkIGFuIGVycm9yID0+YCwgZXJyb3IsIHN0ZGVycik7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSkuc3Rkb3V0KTtcclxufSkiXX0=