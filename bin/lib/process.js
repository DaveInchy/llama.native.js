import { exec as run } from "node:child_process";
import { parseArgs } from "./parsing.js";
export const execShell = (args, callbackFunction) => {
    const shellCmd = parseArgs(args);
    console.log("process spawned", shellCmd);
    return run(shellCmd, (err, stdout, stderr) => {
        if (err) {
            console.error("\n" + stderr);
        }
        else {
            callbackFunction("\n" + stdout + "\n");
        }
    }).stdout;
};
export const Run = (argv, programFile) => new Promise((resolve, reject) => {
    var command = parseArgs([(programFile ? programFile : ""), ...argv]);
    console.log(`[process]`, `spawning child process ...`);
    return resolve(run(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`[process]`, `recieved an error =>`, error, stderr);
            reject(error);
        }
    }).stdout);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBK0IsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFNekMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBbUIsRUFBRSxnQkFBdUMsRUFBbUIsRUFBRTtJQUN2RyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUUsQ0FBQztJQUMxQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQ2YsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3BCLElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNILGdCQUFnQixDQUFDLElBQUksR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDLENBQ0osQ0FBQyxNQUFNLENBQUE7QUFDWixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFjLEVBQUUsV0FBb0IsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDbkcsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDdkQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQW9CLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ2pGLElBQUksS0FBSyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQjtJQUNMLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2YsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGlsZFByb2Nlc3MsIEV4ZWNFeGNlcHRpb24sIGV4ZWMgYXMgcnVuIH0gZnJvbSBcIm5vZGU6Y2hpbGRfcHJvY2Vzc1wiO1xyXG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJub2RlOnN0cmVhbVwiO1xyXG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi9wYXJzaW5nLmpzXCI7XHJcblxyXG4vLyBleGVjdXRlIG9uIHdpbjMyIGRlZmF1bHQgY21kLCBhcyBjaGlsZF9wcm9jZXNzIHlvdSBzcGF3biBpbiB0aGUgZGVmYXVsdCBjbWRcclxuLy8gZm9sZGVyIHN0cnVjdHVyZSBpcyBwb3NpeCBidXQgZm9yIHdpbjMyIHNvIGl0IGNhbiBmdWNrIHNoaXQgdXAuXHJcbi8vIHJ1bm5pbmcgZXhlYyBmcm9tIHByb2Nlc3MgbWVhbnMgeW91IEFMU08gcnVuIG9uIHRoZSBzYW1lIHByb2Nlc3MsIEFMU08gcnVuIG9uIHlvdXIgY3VycmVudCBzaGVsbCwgd2hpY2ggY2FuIGJlIGdpdGJhc2hcclxuLy9AZGVwcmljYXRlZFxyXG5leHBvcnQgY29uc3QgZXhlY1NoZWxsID0gKGFyZ3M6IEFycmF5PHN0cmluZz4sIGNhbGxiYWNrRnVuY3Rpb24/OiAob3V0cHV0OiBhbnkpID0+IGFueSk6IFJlYWRhYmxlIHwgbnVsbCA9PiB7XHJcbiAgICBjb25zdCBzaGVsbENtZCA9IHBhcnNlQXJncyhhcmdzKTtcclxuICAgIGNvbnNvbGUubG9nKFwicHJvY2VzcyBzcGF3bmVkXCIsIHNoZWxsQ21kLCk7XHJcbiAgICByZXR1cm4gcnVuKHNoZWxsQ21kLFxyXG4gICAgICAgIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcXG5cIiArIHN0ZGVycik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmN0aW9uKFwiXFxuXCIgKyBzdGRvdXQgKyBcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICkuc3Rkb3V0XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSdW4gPSAoYXJndjogc3RyaW5nW10sIHByb2dyYW1GaWxlPzogc3RyaW5nKSA9PiBuZXcgUHJvbWlzZTxSZWFkYWJsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgdmFyIGNvbW1hbmQgPSBwYXJzZUFyZ3MoWyhwcm9ncmFtRmlsZSA/IHByb2dyYW1GaWxlIDogXCJcIiksIC4uLmFyZ3ZdKTtcclxuICAgIGNvbnNvbGUubG9nKGBbcHJvY2Vzc11gLCBgc3Bhd25pbmcgY2hpbGQgcHJvY2VzcyAuLi5gKTtcclxuICAgIHJldHVybiByZXNvbHZlKHJ1bihjb21tYW5kLCAoZXJyb3I6IEV4ZWNFeGNlcHRpb24sIHN0ZG91dDogc3RyaW5nLCBzdGRlcnI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbcHJvY2Vzc11gLCBgcmVjaWV2ZWQgYW4gZXJyb3IgPT5gLCBlcnJvciwgc3RkZXJyKTtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KS5zdGRvdXQpO1xyXG59KSJdfQ==