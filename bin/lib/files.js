import { __awaiter } from "tslib";
import fs from "node:fs";
import path from "node:path";
export const resolvePath = (fileDir = "package.json") => {
    return path.resolve(fileDir);
};
export const saveResultAsFileMemory = (resultString) => __awaiter(void 0, void 0, void 0, function* () {
    let dateTime = new String(Date.now());
    const filePathMarkdown = resolvePath(`../llama.storage/markdown/${dateTime}.md`);
    const filePathRaw = resolvePath(`../llama.storage/utf8/${dateTime}.txt`);
    fs.writeFileSync(filePathMarkdown, `${resultString}`, { flag: 'a+', "encoding": "utf8" });
    fs.writeFileSync(filePathRaw, `${resultString}`, { flag: "a+", "encoding": "utf8" });
    console.log(`[files]`, `Stored Dialog in Markdown format and Raw UTF8 Text format.`);
    return;
});
const resolveCurrWorkDir = () => path.resolve(process.cwd());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsibGliL2ZpbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDekIsT0FBTyxJQUFJLE1BQU0sV0FBVyxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLFVBQWtCLGNBQWMsRUFBRSxFQUFFO0lBQzVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFPLFlBQVksRUFBRSxFQUFFO0lBQ3pELElBQUksUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLDZCQUE2QixRQUFRLEtBQUssQ0FBQyxDQUFDO0lBRWpGLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyx5QkFBeUIsUUFBUSxNQUFNLENBQUMsQ0FBQztJQUV6RSxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsWUFBWSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzFGLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLEdBQUcsWUFBWSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRXJGLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLDREQUE0RCxDQUFDLENBQUM7SUFDckYsT0FBTztBQUNYLENBQUMsQ0FBQSxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJub2RlOmZzXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcclxuXHJcbmV4cG9ydCBjb25zdCByZXNvbHZlUGF0aCA9IChmaWxlRGlyOiBzdHJpbmcgPSBcInBhY2thZ2UuanNvblwiKSA9PiB7XHJcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKGZpbGVEaXIpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2F2ZVJlc3VsdEFzRmlsZU1lbW9yeSA9IGFzeW5jIChyZXN1bHRTdHJpbmcpID0+IHtcclxuICAgIGxldCBkYXRlVGltZSA9IG5ldyBTdHJpbmcoRGF0ZS5ub3coKSk7XHJcblxyXG4gICAgY29uc3QgZmlsZVBhdGhNYXJrZG93biA9IHJlc29sdmVQYXRoKGAuLi9sbGFtYS5zdG9yYWdlL21hcmtkb3duLyR7ZGF0ZVRpbWV9Lm1kYCk7XHJcblxyXG4gICAgY29uc3QgZmlsZVBhdGhSYXcgPSByZXNvbHZlUGF0aChgLi4vbGxhbWEuc3RvcmFnZS91dGY4LyR7ZGF0ZVRpbWV9LnR4dGApO1xyXG5cclxuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGhNYXJrZG93biwgYCR7cmVzdWx0U3RyaW5nfWAsIHsgZmxhZzogJ2ErJywgXCJlbmNvZGluZ1wiOiBcInV0ZjhcIiB9KTtcclxuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGhSYXcsIGAke3Jlc3VsdFN0cmluZ31gLCB7IGZsYWc6IFwiYStcIiwgXCJlbmNvZGluZ1wiOiBcInV0ZjhcIiB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgW2ZpbGVzXWAsIGBTdG9yZWQgRGlhbG9nIGluIE1hcmtkb3duIGZvcm1hdCBhbmQgUmF3IFVURjggVGV4dCBmb3JtYXQuYCk7XHJcbiAgICByZXR1cm47XHJcbn07XHJcblxyXG5jb25zdCByZXNvbHZlQ3VycldvcmtEaXIgPSAoKSA9PiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSk7Il19