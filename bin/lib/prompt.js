import { __awaiter } from "tslib";
import { exec } from "child_process";
import { parseCommand } from "./parsing.js";
export const wait = (waitForSec = 0.1) => new Promise((resolve, rejects) => {
    try {
        setTimeout(() => {
            resolve();
        }, waitForSec * 1000);
    }
    catch (err) {
        rejects(err);
    }
    return;
});
export const exeShell = (args, callbackFunction) => {
    const shellCmd = parseCommand(args);
    return exec(shellCmd, (err, stdout, stderr) => {
        if (err) {
            console.error("\n" + stderr);
        }
        else {
            callbackFunction("\n" + stdout + "\n");
        }
    }).stdout;
};
export const cleanUp = (callback) => __awaiter(void 0, void 0, void 0, function* () {
    return callback();
});
export default exeShell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibGliL3Byb21wdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsT0FBTyxFQUFFLElBQUksRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUcvQyxPQUFPLEVBQUUsWUFBWSxFQUEwQixNQUFNLGNBQWMsQ0FBQztBQUVwRSxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRTtJQUM3RSxJQUFJO1FBQ0EsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQyxFQUFFLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUN6QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTTtBQUNWLENBQUMsQ0FBQyxDQUFDO0FBS0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBbUIsRUFBRSxnQkFBdUMsRUFBbUIsRUFBRTtJQUN0RyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUNoQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDcEIsSUFBSSxHQUFHLEVBQUU7WUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0gsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUMsQ0FDSixDQUFDLE1BQU0sQ0FBQztBQUNiLENBQUMsQ0FBQTtBQWVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFPLFFBQVEsRUFBRSxFQUFFO0lBRXRDLE9BQU8sUUFBUSxFQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFBLENBQUM7QUFFRixlQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHAsIHsgcGFyc2UgfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xyXG5pbXBvcnQgeyBleGVjLCBleGVjU3luYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVJlcXVpcmUgfSBmcm9tIFwibW9kdWxlXCI7XHJcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xyXG5pbXBvcnQgeyBwYXJzZUNvbW1hbmQsIHBhcnNlUGF0aCwgcmVzb2x2ZVBhdGggfSBmcm9tIFwiLi9wYXJzaW5nLmpzXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgd2FpdCA9ICh3YWl0Rm9yU2VjID0gMC4xKSA9PiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0cykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sIHdhaXRGb3JTZWMgKiAxMDAwKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJlamVjdHMoZXJyKTtcclxuICAgIH1cclxuICAgIHJldHVyblxyXG59KTtcclxuXHJcbi8vIGV4ZWN1dGUgb24gd2luMzIgZGVmYXVsdCBjbWQsIGFzIGNoaWxkX3Byb2Nlc3MgeW91IHNwYXduIGluIHRoZSBkZWZhdWx0IGNtZFxyXG4vLyBydW5uaW5nIGV4ZWMgZnJvbSBwcm9jZXNzIG1lYW5zIHlvdSBBTFNPIHJ1biBvbiB0aGUgc2FtZSBwcm9jZXNzLCBBTFNPIHJ1biBvbiB5b3VyIGN1cnJlbnQgc2hlbGwsIHdoaWNoIGNhbiBiZSBnaXRiYXNoXHJcbi8vIGZvbGRlciBzdHJ1Y3R1cmUgaXMgcG9zaXggYnV0IGZvciB3aW4zMiBzbyBpdCBjYW4gZnVjayBzaGl0IHVwLlxyXG5leHBvcnQgY29uc3QgZXhlU2hlbGwgPSAoYXJnczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2tGdW5jdGlvbj86IChvdXRwdXQ6IGFueSkgPT4gYW55KTogUmVhZGFibGUgfCBudWxsID0+IHtcclxuICAgIGNvbnN0IHNoZWxsQ21kID0gcGFyc2VDb21tYW5kKGFyZ3MpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJwcm9jZXNzIHNwYXduZWRcIiwgYXJncywgc2hlbGxDbWQsKTtcclxuICAgIHJldHVybiBleGVjKHNoZWxsQ21kLFxyXG4gICAgICAgIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcXG5cIiArIHN0ZGVycik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmN0aW9uKFwiXFxuXCIgKyBzdGRvdXQgKyBcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICkuc3Rkb3V0O1xyXG59XHJcblxyXG4vLyBleHBvcnQgY29uc3Qgc2F2ZVJlc3VsdEFzSGFyZE1lbW9yeSA9IGFzeW5jIChyZXN1bHRTdHJpbmcpID0+IHtcclxuLy8gICAgIGxldCBkYXRlVGltZSA9IG5ldyBTdHJpbmcoRGF0ZS5ub3coKSk7XHJcblxyXG4vLyAgICAgY29uc3QgZmlsZVBhdGhNYXJrZG93biA9IHJlc29sdmVQYXRoKGAuLi9sbGFtYS5zdG9yYWdlL21hcmtkb3duLyR7ZGF0ZVRpbWV9Lm1kYCk7XHJcbi8vICAgICBjb25zdCBmaWxlUGF0aFJhdyA9IHJlc29sdmVQYXRoKGAuLi9sbGFtYS5zdG9yYWdlL3V0ZjgvJHtkYXRlVGltZX0udHh0YCk7XHJcblxyXG4vLyAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aE1hcmtkb3duLCBgJHtyZXN1bHRTdHJpbmd9YCwgeyBmbGFnOiAnYSsnLCBcImVuY29kaW5nXCI6IFwidXRmOFwiIH0pO1xyXG4vLyAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aFJhdywgYCR7cmVzdWx0U3RyaW5nfWAsIHsgZmxhZzogXCJhK1wiLCBcImVuY29kaW5nXCI6IFwidXRmOFwiIH0pO1xyXG5cclxuLy8gICAgIGNvbnNvbGUubG9nKGBcXG5cXHJbTUVNT1JZXSA+IFN0b3JlZCBEaWFsb2cgaW4gTWFya2Rvd24gZm9ybWF0IGFuZCBSYXcgVVRGOCBUZXh0IGZvcm1hdC5gKTtcclxuLy8gICAgIHJldHVybjtcclxuLy8gfTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhblVwID0gYXN5bmMgKGNhbGxiYWNrKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBleGVTaGVsbDsiXX0=