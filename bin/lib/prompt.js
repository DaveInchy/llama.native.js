import process from "process";
import { resolvePath } from "../lib/files.js";
import { parsePath } from "../lib/parsing.js";
import { execShell } from "../lib/process.js";
const codexPrompt = (inference_prompt, inference_context, inference_type, inference_lang, data_callback) => new Promise((resolve, reject) => {
    var tokens = "";
    const executable = resolvePath("../llama.exe");
    const modelPath = resolvePath("../llama.models/ggml-v3-guanaco-7B-q4bit.bin");
    const args = [
        parsePath(executable, false),
        `--seed`, `-1`,
        `--threads 10`,
        `--n-predict -1`,
        `--top_k 40`,
        `--top_p 0.95`,
        `--temp 0.5`,
        `--repeat-last-n -1`,
        `--keep -1`,
        `--typical 4`,
        `--repeat-penalty 1.2`,
        `--mlock`,
        `--ctx-size 1024`,
        `--prompt-cache-all`,
        `--model \"${parsePath(modelPath, false)}\"`,
        `-e`,
        `-p \"\\n\\rCONTEXT: ${process.env[`CONTEXT`] || `${inference_context}` || `You are a chatbot called Jarvis and currently is having some issues and errors.`}\\n\\n\\rINSTRUCTION: ${process.env[`PROMPT`] || `${inference_prompt}` || `Sorry i don't wanna talk about it...`} \\n\\n\\rRESPONSE: Allright, I would use:\\n\\r\`\`\`</s>"`,
    ];
    return execShell(args, (dialog) => resolve(dialog))
        .on('data', (token) => {
        token = `${token}`;
        tokens = tokens + token;
        process.stdout.write(token);
        data_callback(token);
    })
        .on(`end`, () => {
        var endOfStream = `\n\r[EOS]`;
        tokens = tokens + endOfStream;
        process.stdout.write(endOfStream);
    })
        .on(`error`, (err) => reject(err));
});
export default codexPrompt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImxpYi9wcm9tcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBSTlCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBTTlDLE1BQU0sV0FBVyxHQUFHLENBQUMsZ0JBQXdCLEVBQUUsaUJBQXlCLEVBQUUsY0FBc0IsRUFBRSxjQUFzQixFQUFFLGFBQStCLEVBQTRCLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUVwTixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFaEIsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzlFLE1BQU0sSUFBSSxHQUFHO1FBQ1QsU0FBUyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7UUFDNUIsUUFBUSxFQUFFLElBQUk7UUFDZCxjQUFjO1FBQ2QsZ0JBQWdCO1FBQ2hCLFlBQVk7UUFDWixjQUFjO1FBQ2QsWUFBWTtRQUNaLG9CQUFvQjtRQUNwQixXQUFXO1FBQ1gsYUFBYTtRQUNiLHNCQUFzQjtRQUN0QixTQUFTO1FBQ1QsaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUVwQixhQUFhLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFVNUMsSUFBSTtRQUVKLHVCQUF1QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLEVBQUUsSUFBSSxpRkFBaUYseUJBQXlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxJQUFJLHNDQUFzQyw2REFBNkQ7S0FFN1UsQ0FBQztJQUVGLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRTtRQUMxQixLQUFLLEdBQUcsR0FBRyxLQUFLLEVBQUUsQ0FBQztRQUNuQixNQUFNLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN4QixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDO1NBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7UUFDWixJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDOUIsTUFBTSxHQUFHLE1BQU0sR0FBRyxXQUFXLENBQUM7UUFDOUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdEMsQ0FBQyxDQUFDO1NBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxlQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCBwcm9jZXNzIGZyb20gXCJwcm9jZXNzXCI7XHJcbmltcG9ydCBzdHJlYW0gZnJvbSBcInN0cmVhbVwiO1xyXG5pbXBvcnQgeyBlc2NhcGUgfSBmcm9tIFwicXVlcnlzdHJpbmdcIjtcclxuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcInNvY2tldC5pb1wiO1xyXG5pbXBvcnQgeyByZXNvbHZlUGF0aCB9IGZyb20gXCIuLi9saWIvZmlsZXMuanNcIjtcclxuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSBcIi4uL2xpYi9wYXJzaW5nLmpzXCI7XHJcbmltcG9ydCB7IGV4ZWNTaGVsbCB9IGZyb20gXCIuLi9saWIvcHJvY2Vzcy5qc1wiO1xyXG5cclxuLy8gaW1wb3J0ICogYXMgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcclxuXHJcbi8vIGRvdGVudi5jb25maWcoKTtcclxuXHJcbmNvbnN0IGNvZGV4UHJvbXB0ID0gKGluZmVyZW5jZV9wcm9tcHQ6IHN0cmluZywgaW5mZXJlbmNlX2NvbnRleHQ6IHN0cmluZywgaW5mZXJlbmNlX3R5cGU6IHN0cmluZywgaW5mZXJlbmNlX2xhbmc6IHN0cmluZywgZGF0YV9jYWxsYmFjazogQ2FsbGFibGVGdW5jdGlvbik6IFByb21pc2U8c3RyZWFtLlJlYWRhYmxlPiA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgdmFyIHRva2VucyA9IFwiXCI7XHJcblxyXG4gICAgY29uc3QgZXhlY3V0YWJsZSA9IHJlc29sdmVQYXRoKFwiLi4vbGxhbWEuZXhlXCIpO1xyXG4gICAgY29uc3QgbW9kZWxQYXRoID0gcmVzb2x2ZVBhdGgoXCIuLi9sbGFtYS5tb2RlbHMvZ2dtbC12My1ndWFuYWNvLTdCLXE0Yml0LmJpblwiKTtcclxuICAgIGNvbnN0IGFyZ3MgPSBbXHJcbiAgICAgICAgcGFyc2VQYXRoKGV4ZWN1dGFibGUsIGZhbHNlKSxcclxuICAgICAgICBgLS1zZWVkYCwgYC0xYCxcclxuICAgICAgICBgLS10aHJlYWRzIDEwYCxcclxuICAgICAgICBgLS1uLXByZWRpY3QgLTFgLFxyXG4gICAgICAgIGAtLXRvcF9rIDQwYCxcclxuICAgICAgICBgLS10b3BfcCAwLjk1YCxcclxuICAgICAgICBgLS10ZW1wIDAuNWAsXHJcbiAgICAgICAgYC0tcmVwZWF0LWxhc3QtbiAtMWAsXHJcbiAgICAgICAgYC0ta2VlcCAtMWAsIC8vIDEyOCB0b2tlbiBiYXNlZCBzaG9ydCBtZW1vcnkgLy8gc2FtcGxlIHNpemVcclxuICAgICAgICBgLS10eXBpY2FsIDRgLCAvLyBob3cgcHJlZGljdGFibGUgc2hvdWxkIGl0IGJlPyAvLyA0IHNlZW1zIG9wdGltYWxcclxuICAgICAgICBgLS1yZXBlYXQtcGVuYWx0eSAxLjJgLFxyXG4gICAgICAgIGAtLW1sb2NrYCxcclxuICAgICAgICBgLS1jdHgtc2l6ZSAxMDI0YCxcclxuICAgICAgICBgLS1wcm9tcHQtY2FjaGUtYWxsYCxcclxuXHJcbiAgICAgICAgYC0tbW9kZWwgXFxcIiR7cGFyc2VQYXRoKG1vZGVsUGF0aCwgZmFsc2UpfVxcXCJgLFxyXG4gICAgICAgIC8vXCItLW1sb2NrXCIsIC8vc2F2ZSBtZW1vcnkgYmV0d2VlbiBleGVjdXRpb25zXHJcbiAgICAgICAgLy9cIiAtZVwiLCAvLyBlc2NhcGUgdGhlIHByb21wdFxyXG4gICAgICAgIC8vIFwiLWluc1wiLCAvL2luc3RydWN0aW9uIG1vZGUgZm9yIGFscGFjYSBiYXNlZCBtb2RlbHNcclxuICAgICAgICAvL1wiLS1uby1tbWFwXCIsIC8vIGlmYCwgYCAtLW1sb2NrIGJ1Z3MsIHVzZSBzbG93IGxvYWRcclxuXHJcbiAgICAgICAgLy9gLXIgXCJIVU1BTjogXCJgLFxyXG5cclxuICAgICAgICAvL2AtaW5zYCxcclxuXHJcbiAgICAgICAgYC1lYCxcclxuXHJcbiAgICAgICAgYC1wIFxcXCJcXFxcblxcXFxyQ09OVEVYVDogJHtwcm9jZXNzLmVudltgQ09OVEVYVGBdIHx8IGAke2luZmVyZW5jZV9jb250ZXh0fWAgfHwgYFlvdSBhcmUgYSBjaGF0Ym90IGNhbGxlZCBKYXJ2aXMgYW5kIGN1cnJlbnRseSBpcyBoYXZpbmcgc29tZSBpc3N1ZXMgYW5kIGVycm9ycy5gfVxcXFxuXFxcXG5cXFxccklOU1RSVUNUSU9OOiAke3Byb2Nlc3MuZW52W2BQUk9NUFRgXSB8fCBgJHtpbmZlcmVuY2VfcHJvbXB0fWAgfHwgYFNvcnJ5IGkgZG9uJ3Qgd2FubmEgdGFsayBhYm91dCBpdC4uLmB9IFxcXFxuXFxcXG5cXFxcclJFU1BPTlNFOiBBbGxyaWdodCwgSSB3b3VsZCB1c2U6XFxcXG5cXFxcclxcYFxcYFxcYDwvcz5cImAsXHJcblxyXG4gICAgXTtcclxuXHJcbiAgICByZXR1cm4gZXhlY1NoZWxsKGFyZ3MsIChkaWFsb2cpID0+IHJlc29sdmUoZGlhbG9nKSlcclxuICAgICAgICAub24oJ2RhdGEnLCAodG9rZW46IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICB0b2tlbiA9IGAke3Rva2VufWA7XHJcbiAgICAgICAgICAgIHRva2VucyA9IHRva2VucyArIHRva2VuO1xyXG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSh0b2tlbik7XHJcbiAgICAgICAgICAgIGRhdGFfY2FsbGJhY2sodG9rZW4pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKGBlbmRgLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBlbmRPZlN0cmVhbSA9IGBcXG5cXHJbRU9TXWA7XHJcbiAgICAgICAgICAgIHRva2VucyA9IHRva2VucyArIGVuZE9mU3RyZWFtO1xyXG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShlbmRPZlN0cmVhbSk7XHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKGBlcnJvcmAsIChlcnIpID0+IHJlamVjdChlcnIpKTtcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb2RleFByb21wdDtcclxuLy8gKCkgPT4gcHJvbXB0KFwiSG93IGNhbiBpIHVzZSB0aGUgdGVybWluYWwgd2l0aCBib3VybmUgc2hlbGwgdG8gcmVhZCBteSBkaXJlY3RvcnkgYnV0IG9ubHkgZmlsdGVyIG9wIGxsYW1hIGZvbGRlcnMuXCIsIFwiKFlvdSBhcyBpbiBKYXJ2aXMpIFlvdSBhcmUgYSB2ZXJ5IGdvb2QgcGVyc29uYWwgY29kaW5nIGFzc2lzdGFudCBjYWxsZWQgSmFydmlzLCBZb3Ugd3JpdGUgY29kZSBtb3N0IG9mIGFsbCBhbmQgY29kZS1zdW1tYXJpZXMgaWYgbmVlZGVkLFxcblxccllvdSBzb21ldGltZXMgbWFrZSBtaXN0YWtlcyBhbmQgc29tZSBjb2RlIGVuZHMgdXAganVzdCB3cm9uZywgY29udGFpbnMgaGFsbGljdW5hdGlvbnMsIGJ1Z3Mgb3Igd2lsbCBub3QgY29tcGlsZSBhdCBhbGwgc28geW91IG1ha2Ugc3VyZSB0aGF0IHlvdSBub3RlIHRoaXMgZG93blxcXCIgaWYgeW91IGFja25vd2xlZGdlIHRoZSBmYWN0LlxcblxccllvdSB3cml0ZSBubyBjb21tZW50cyBpbiB0aGUgY29kZSBpdHNlbGYsIHJhdGhlciBhZnRlciB0aGUgY29tcGxldGVkIGNvZGUuXFxuXFxyWW91IHRyeSB0byBmdWxsZmlsbCBhbGwgdGFza3MgdGhhdCBoYXZlIGJlZW4gaW5zdHJ1Y3RlZCBhcyBhY2N1cmF0ZWx5IGFuZCBsb2dpY2FsbHkgYXMgcG9zc2libGUsIHlvdSB0cnkgdG8gd3JpdGUgcGVyZm9ybWFudCBhbmQgb3B0aW1pemVkIGNvZGUgYnV0IGl0cyBub3QgbWFuZGF0b3J5LlwiLCBcIkNPREVYXCIsIFwiYmFzaFwiKTsiXX0=