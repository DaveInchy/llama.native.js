const parsePath = (filePath, isGitBash) => {
    var old = (`${filePath}`);
    if (old.includes("\/d\/"))
        old = old.replace("\/d\/", `D:\\`);
    if (old.includes("\/c\/"))
        old = old.replace("\/c\/", `C:\\`);
    if (old.includes("\/b\/"))
        old = old.replace("\/b\/", `B:\\`);
    if (old.includes("\/a\/"))
        old = old.replace("\/a\/", `A:\\`);
    if (old.includes("\\\\"))
        old = old.replaceAll("\\\\", `\\`);
    if (old.includes("\\"))
        old = old.replaceAll("\\", `\/`);
    if (old.includes("@"))
        old = old.replace("@", `\@`);
    if (isGitBash) {
        if (old.includes("A:/"))
            old = old.replace("A:/", `\/a\/`);
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
        if (old.includes("C:/"))
            old = old.replace("C:/", `\/c\/`);
        if (old.includes("D:/"))
            old = old.replace("D:/", `\/d\/`);
    }
    ;
    if (old.includes("\ \ "))
        old = old.replaceAll("\ \ ", "\ ");
    if (old.includes("\ "))
        old = old.replaceAll("\ ", ``);
    var oldAsNew = old;
    return oldAsNew;
};
const parseArgs = (args) => {
    let string = "";
    args.map(arg => {
        let substr = arg;
        return string = string + " " + substr;
    });
    return string;
};
export { parseArgs, parseArgs as parseCommand, parsePath };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wYXJzaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sU0FBUyxHQUFHLENBQUMsUUFBZ0IsRUFBRSxTQUFtQixFQUFFLEVBQUU7SUFDeEQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFHMUIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUc5RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVwRCxJQUFJLFNBQVMsRUFBRTtRQUNYLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMxRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzFELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7S0FDN0Q7SUFBQSxDQUFDO0lBR0YsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXZELElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQTtJQUNsQixPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUE7QUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQW1CLEVBQUUsRUFBRTtJQUN0QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNYLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixPQUFPLE1BQU0sR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxJQUFJLFlBQVksRUFBRSxTQUFTLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcclxuXHJcbmNvbnN0IHBhcnNlUGF0aCA9IChmaWxlUGF0aDogc3RyaW5nLCBpc0dpdEJhc2g/OiBib29sZWFuKSA9PiB7XHJcbiAgICB2YXIgb2xkID0gKGAke2ZpbGVQYXRofWApO1xyXG5cclxuICAgIC8vIEdpdCBCYXNoID0+IENNRCA6OiBXaW4zMiBEcml2ZXNcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXC9kXFwvXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIlxcL2RcXC9cIiwgYEQ6XFxcXGApO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcL2NcXC9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiXFwvY1xcL1wiLCBgQzpcXFxcYCk7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwvYlxcL1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJcXC9iXFwvXCIsIGBCOlxcXFxgKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXC9hXFwvXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIlxcL2FcXC9cIiwgYEE6XFxcXGApO1xyXG5cclxuICAgIC8vIFdpbjMyID0+XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFxcXFxcXFxcIikpIG9sZCA9IG9sZC5yZXBsYWNlQWxsKFwiXFxcXFxcXFxcIiwgYFxcXFxgKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXFxcXCIpKSBvbGQgPSBvbGQucmVwbGFjZUFsbChcIlxcXFxcIiwgYFxcL2ApO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIkBcIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQFwiLCBgXFxAYCk7XHJcblxyXG4gICAgaWYgKGlzR2l0QmFzaCkge1xyXG4gICAgICAgIGlmIChvbGQuaW5jbHVkZXMoXCJBOi9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQTovXCIsIGBcXC9hXFwvYClcclxuICAgICAgICBpZiAob2xkLmluY2x1ZGVzKFwiQjovXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIkI6L1wiLCBgXFwvYlxcL2ApXHJcbiAgICAgICAgaWYgKG9sZC5pbmNsdWRlcyhcIkM6L1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJDOi9cIiwgYFxcL2NcXC9gKVxyXG4gICAgICAgIGlmIChvbGQuaW5jbHVkZXMoXCJEOi9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiRDovXCIsIGBcXC9kXFwvYClcclxuICAgIH07XHJcblxyXG4gICAgLy8gU3BhY2VzIGFuZCBsaW5lIGJyZWFrc1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcIFxcIFwiKSkgb2xkID0gb2xkLnJlcGxhY2VBbGwoXCJcXCBcXCBcIiwgXCJcXCBcIik7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwgXCIpKSBvbGQgPSBvbGQucmVwbGFjZUFsbChcIlxcIFwiLCBgYCk7XHJcblxyXG4gICAgdmFyIG9sZEFzTmV3ID0gb2xkXHJcbiAgICByZXR1cm4gb2xkQXNOZXc7XHJcbn1cclxuXHJcbmNvbnN0IHBhcnNlQXJncyA9IChhcmdzOiBBcnJheTxzdHJpbmc+KSA9PiB7XHJcbiAgICBsZXQgc3RyaW5nID0gXCJcIjtcclxuICAgIGFyZ3MubWFwKGFyZyA9PiB7XHJcbiAgICAgICAgbGV0IHN1YnN0ciA9IGFyZztcclxuICAgICAgICByZXR1cm4gc3RyaW5nID0gc3RyaW5nICsgXCIgXCIgKyBzdWJzdHI7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHBhcnNlQXJncywgcGFyc2VBcmdzIGFzIHBhcnNlQ29tbWFuZCwgcGFyc2VQYXRoIH0iXX0=