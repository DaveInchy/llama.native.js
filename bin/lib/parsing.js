import path from "path";
const resolveCurrWorkDir = () => path.resolve(process.cwd());
const resolvePath = (fileDir = "package.json") => {
    return path.resolve(fileDir);
};
const parsePath = (filePath, isGitBash) => {
    var old = (`${filePath}`);
    if (old.includes("\/d\/"))
        old = old.replace("\/d\/", `D:\\`);
    if (old.includes("\/c\/"))
        old = old.replace("\/c\/", `C:\\`);
    if (old.includes("\/b\/"))
        old = old.replace("\/b\/", `B:\\`);
    if (old.includes("\/a\/"))
        old = old.replace("\/a\/", `A:\\`);
    if (old.includes("\\\\"))
        old = old.replaceAll("\\\\", `\\`);
    if (old.includes("\\"))
        old = old.replaceAll("\\", `\/`);
    if (old.includes("@"))
        old = old.replace("@", `\@`);
    if (isGitBash) {
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
        if (old.includes("B:/"))
            old = old.replace("B:/", `\/b\/`);
    }
    ;
    if (old.includes("\ \ "))
        old = old.replaceAll("\ \ ", "\ ");
    if (old.includes("\ "))
        old = old.replaceAll("\ ", ``);
    var oldAsNew = old;
    return oldAsNew;
};
const parseCommand = (args) => {
    let string = "";
    args.map(arg => {
        let substr = arg;
        return string = string + " " + substr;
    });
    return string;
};
export { parseCommand, parsePath, resolveCurrWorkDir, resolvePath };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wYXJzaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQTZDeEIsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBRTdELE1BQU0sV0FBVyxHQUFHLENBQUMsVUFBa0IsY0FBYyxFQUFFLEVBQUU7SUFDckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQTtBQUNELE1BQU0sU0FBUyxHQUFHLENBQUMsUUFBZ0IsRUFBRSxTQUFtQixFQUFFLEVBQUU7SUFDeEQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFJMUIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUc5RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVwRCxJQUFJLFNBQVMsRUFBRTtRQUNYLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMxRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzFELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7S0FDN0Q7SUFBQSxDQUFDO0lBR0YsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXZELElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQTtJQUNsQixPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUE7QUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLElBQW1CLEVBQUUsRUFBRTtJQUN6QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNYLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixPQUFPLE1BQU0sR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuXHJcbi8vIGludGVyZmFjZSBQaXBlbGluZVByb3BzIHtcclxuXHJcblxyXG4vLyB9XHJcbi8vIHR5cGUgUGlwZWxpbmVUeXBlPFQgPSBQYXJ0aWFsPFBpcGVsaW5lPFBpcGVbXT4+PiA9IFQ7XHJcblxyXG4vLyBjbGFzcyBQaXBlIHtcclxuXHJcblxyXG4vLyAgICAgcHVibGljIGNvbnN0cnVjdG9yKCk6IFByb21pc2U8UGlwZT4ge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGlvbigpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIGFzeW5jIGV4ZWN1dGlvbigpIHtcclxuXHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9XHJcblxyXG4vLyBpbnRlcmZhY2UgUGlwZWxpbmUge1xyXG5cclxuLy8gfVxyXG5cclxuXHJcbi8vIGNsYXNzIEZhY3Rvcnk8VCA9IFBhcnRpYWw8UGlwZWxpbmVQcm9wcz4+XHJcbi8vIHtcclxuLy8gICAgIGNvbmZpZzogVDtcclxuXHJcbi8vICAgICBwdWJsaWMgY29uc3RydWN0b3IoY29uZmlnOiBULCBjaGFpbjogUHJvbWlzZTxQaXBlPltdKSB7XHJcbi8vICAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcblxyXG4vLyAgICAgICAgIC8vIGdvIHRocm91Z2ggY2hhaW5cclxuLy8gICAgICAgICB0aGlzLnJ1bkNoYWluKClcclxuXHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcnVuQ2hhaW4oKSB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbmNvbnN0IHJlc29sdmVDdXJyV29ya0RpciA9ICgpID0+IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpKTtcclxuXHJcbmNvbnN0IHJlc29sdmVQYXRoID0gKGZpbGVEaXI6IHN0cmluZyA9IFwicGFja2FnZS5qc29uXCIpID0+IHtcclxuICAgIHJldHVybiBwYXRoLnJlc29sdmUoZmlsZURpcik7XHJcbn1cclxuY29uc3QgcGFyc2VQYXRoID0gKGZpbGVQYXRoOiBzdHJpbmcsIGlzR2l0QmFzaD86IGJvb2xlYW4pID0+IHtcclxuICAgIHZhciBvbGQgPSAoYCR7ZmlsZVBhdGh9YCk7XHJcblxyXG5cclxuICAgIC8vIEdpdCBCYXNoID0+IENNRCA6OiBXaW4zMiBEcml2ZXNcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXC9kXFwvXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIlxcL2RcXC9cIiwgYEQ6XFxcXGApO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcL2NcXC9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiXFwvY1xcL1wiLCBgQzpcXFxcYCk7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwvYlxcL1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJcXC9iXFwvXCIsIGBCOlxcXFxgKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXC9hXFwvXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIlxcL2FcXC9cIiwgYEE6XFxcXGApO1xyXG5cclxuICAgIC8vIFdpbjMyID0+XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFxcXFxcXFxcIikpIG9sZCA9IG9sZC5yZXBsYWNlQWxsKFwiXFxcXFxcXFxcIiwgYFxcXFxgKTtcclxuICAgIGlmIChvbGQuaW5jbHVkZXMoXCJcXFxcXCIpKSBvbGQgPSBvbGQucmVwbGFjZUFsbChcIlxcXFxcIiwgYFxcL2ApO1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIkBcIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQFwiLCBgXFxAYCk7XHJcblxyXG4gICAgaWYgKGlzR2l0QmFzaCkge1xyXG4gICAgICAgIGlmIChvbGQuaW5jbHVkZXMoXCJCOi9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQjovXCIsIGBcXC9iXFwvYClcclxuICAgICAgICBpZiAob2xkLmluY2x1ZGVzKFwiQjovXCIpKSBvbGQgPSBvbGQucmVwbGFjZShcIkI6L1wiLCBgXFwvYlxcL2ApXHJcbiAgICAgICAgaWYgKG9sZC5pbmNsdWRlcyhcIkI6L1wiKSkgb2xkID0gb2xkLnJlcGxhY2UoXCJCOi9cIiwgYFxcL2JcXC9gKVxyXG4gICAgICAgIGlmIChvbGQuaW5jbHVkZXMoXCJCOi9cIikpIG9sZCA9IG9sZC5yZXBsYWNlKFwiQjovXCIsIGBcXC9iXFwvYClcclxuICAgIH07XHJcblxyXG4gICAgLy8gU3BhY2VzIGFuZCBsaW5lIGJyZWFrc1xyXG4gICAgaWYgKG9sZC5pbmNsdWRlcyhcIlxcIFxcIFwiKSkgb2xkID0gb2xkLnJlcGxhY2VBbGwoXCJcXCBcXCBcIiwgXCJcXCBcIik7XHJcbiAgICBpZiAob2xkLmluY2x1ZGVzKFwiXFwgXCIpKSBvbGQgPSBvbGQucmVwbGFjZUFsbChcIlxcIFwiLCBgYCk7XHJcblxyXG4gICAgdmFyIG9sZEFzTmV3ID0gb2xkXHJcbiAgICByZXR1cm4gb2xkQXNOZXc7XHJcbn1cclxuXHJcbmNvbnN0IHBhcnNlQ29tbWFuZCA9IChhcmdzOiBBcnJheTxzdHJpbmc+KSA9PiB7XHJcbiAgICBsZXQgc3RyaW5nID0gXCJcIjtcclxuICAgIGFyZ3MubWFwKGFyZyA9PiB7XHJcbiAgICAgICAgbGV0IHN1YnN0ciA9IGFyZztcclxuICAgICAgICByZXR1cm4gc3RyaW5nID0gc3RyaW5nICsgXCIgXCIgKyBzdWJzdHI7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHBhcnNlQ29tbWFuZCwgcGFyc2VQYXRoLCByZXNvbHZlQ3VycldvcmtEaXIsIHJlc29sdmVQYXRoIH0iXX0=