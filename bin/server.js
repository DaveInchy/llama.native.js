import { __awaiter } from "tslib";
import cors from "cors";
import express from "express";
import { Server } from "http";
import { Server as SocketServer } from "socket.io";
const port = process.env["PORT"] || 3331;
var PWD = process.cwd();
const getRootPath = (path = "") => PWD + "/../" + (path === null || path === void 0 ? void 0 : path.toString());
const app = express();
var httpServer = new Server(app);
var socketServer = new SocketServer(httpServer);
app.use(express.static(getRootPath("/llama.public/")));
app.use(cors());
var waitingSocketIds = [];
app.use("/jarvis/demo/connect", (_req, _res, _next) => __awaiter(void 0, void 0, void 0, function* () {
    const request = _req;
    const response = _res;
    try {
        socketServer.on("connection", function (client) {
            console.log(`client ${client.id} connected successfully`, client.data);
            client.use(([event, ...args], next) => {
                if (isUnauthorized()) {
                    client.disconnect();
                    throw new Error("unauthorized event");
                }
                switch (event.replaceAll(" ", "-")) {
                    case "request-inference":
                        var position = waitingSocketIds.push([client.id, client]);
                        client.join("waiting");
                        client.to("waiting").emit(`message`, `client ${client.id} is qeued up for a single model inference`);
                        client.emit(`message`, `you are number ${position || waitingSocketIds.length - 1} in the queue`);
                        break;
                    case "":
                        break;
                    case "":
                        break;
                    case "":
                        break;
                    case "":
                        break;
                    case "":
                        break;
                    case "message":
                        var token = args[0];
                        console.log(args, args[0], args[1]);
                        break;
                    default:
                        client.disconnect(true);
                        throw new Error("invalid event emitted by: client id " + client.id);
                        break;
                }
                next();
            });
            client.on("error", (err) => {
                var _a;
                console.log(`client ${client.id} recieved an error due to ${(_a = err.cause) === null || _a === void 0 ? void 0 : _a.toString()} => ${err.message}`);
            });
            client.on("disconnect", (reason) => {
                console.log(`client ${client.id} disconnected due to ${reason === null || reason === void 0 ? void 0 : reason.toString()}`);
            });
        });
        socketServer.on("close", () => {
        });
    }
    catch (err) {
        console.log(`[RECIEVED] < ERR : ${err && err.message || "unknown error"}`);
    }
    _next(JSON.stringify(socketServer, (obj) => {
        const ret = new Map();
        Object.keys(obj).forEach((key) => {
            let value = obj[key];
            if ((value && typeof value === 'object') || (!value && !isNaN(Number(value)))) {
                value = JSON.stringify(value);
            }
            ret.set(key, value);
        });
        return Array.from(ret).join(',');
    }));
}));
httpServer.listen(port, () => {
    console.log(`websocket for llama.ccp is online on http://localhost:${port}/`);
});
function isUnauthorized() {
    return false;
}
export default app;
//# sourceMappingURL=data:application/json;base64,